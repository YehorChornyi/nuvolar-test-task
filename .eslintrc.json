{
    "root": true,
    "ignorePatterns": ["**/*.spec.ts", "*.spec.ts"],
    "env": {
        "es6": true,
        "node": true,
        "browser": true
    },
    "overrides": [
        {
            "files": ["*.ts", "*.js"],
            "parserOptions": {
                "ecmaVersion": 2018,
                "sourceType": "module",
                "project": ["./tsconfig.json", "./tsconfig.app.json"]
            },
            "parser": "@typescript-eslint/parser",
            "extends": [
                "plugin:@angular-eslint/ng-cli-compat",
                "plugin:@angular-eslint/ng-cli-compat--formatting-add-on",
                "plugin:@angular-eslint/template/process-inline-templates",
                "plugin:@typescript-eslint/all",
                "plugin:import/errors",
                "plugin:import/warnings",
                "plugin:import/typescript",
                "eslint:recommended",
                "plugin:@angular-eslint/recommended",
                "plugin:prettier/recommended"
            ],
            "plugins": [
                "simple-import-sort",
                "eslint-plugin-no-null",
                "@typescript-eslint",
                "import",
                "jsdoc",
                "rxjs",
                "@angular-eslint",
                "rxjs-angular",
                "typescript-sort-keys",
                "prettier"
            ],
            "settings": {
                "import/extensions": [".js", ".ts"],
                "import/parsers": {
                    "@typescript-eslint/parser": [".ts"]
                },
                "import/cache": {
                    "lifetime": "Infinity"
                },
                "import/resolver": {
                    "typescript": {
                        "alwaysTryTypes": true,
                        "project": ["./tsconfig.json", "./tsconfig.app.json"]
                    },
                    "node": {
                        "alwaysTryTypes": true,
                        "project": ["./tsconfig.json"]
                    }
                }
            },
            "rules": {
                "indent": "off",
                "@typescript-eslint/explicit-module-boundary-types": [
                    "error",
                    {
                        "allowArgumentsExplicitlyTypedAsAny": true
                    }
                ],
                "simple-import-sort/imports": [
                    "error",
                    {
                        "groups": [
                            // Imports from node modules
                            ["^[^./|..//]"],
                            // Imports that matches aliases or begins with './' or '../'
                            [
                                "^(@env|@common|@shared|@services|@stores|@helpers|@models|@interfaces|@enums|@properties|@pipes|@validators|@utils|@reusable/elements|@tables|@spinner|@notification|@notification/services|@pages|@auth|@login|@dashboard|@calendar|@directives|@modals|@confirmation/service)(/.*|$)",
                                "^\\./(?=.*/)(?!/?$)",
                                "^\\.(?!/?$)",
                                "^\\./?$"
                            ]
                        ]
                    }
                ],
                "@typescript-eslint/switch-exhaustiveness-check": "off",
                "@typescript-eslint/non-nullable-type-assertion-style": "off",
                "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
                "@typescript-eslint/no-non-null-assertion": "off",
                "@typescript-eslint/strict-boolean-expressions": [
                    "error",
                    {
                        "allowString": true,
                        "allowNumber": true,
                        "allowNullableBoolean": true,
                        "allowNullableString": true,
                        "allowNullableNumber": true,
                        "allowAny": true
                    }
                ],
                "@typescript-eslint/typedef": [
                    "error",
                    {
                        "arrowParameter": true
                    }
                ],
                "lines-between-class-members": [
                    "error",
                    "always",
                    {
                        "exceptAfterSingleLine": true
                    }
                ],
                "radix": ["error", "always"],
                "@typescript-eslint/no-meaningless-void-operator": [
                    "error",
                    {
                        "checkNever": true
                    }
                ],
                "padding-line-between-statements": "off",
                "@typescript-eslint/padding-line-between-statements": [
                    "error",
                    {
                        "blankLine": "always",
                        "prev": ["*"],
                        "next": [
                            "class",
                            "do",
                            "for",
                            "if",
                            "return",
                            "switch",
                            "try",
                            "interface",
                            "type",
                            "function",
                            "export"
                        ]
                    },
                    {
                        "blankLine": "always",
                        "prev": ["block-like", "const", "let", "var"],
                        "next": "*"
                    },
                    {
                        "blankLine": "never",
                        "prev": ["let", "var"],
                        "next": ["let", "var"]
                    },
                    {
                        "blankLine": "any",
                        "prev": ["const"],
                        "next": ["*"]
                    }
                ],
                "prettier/prettier": [
                    "error",
                    {
                        "endOfLine": "auto"
                    }
                ],
                "arrow-parens": ["error", "always"],
                "import/no-relative-packages": "off",
                "import/no-unresolved": "error",
                "rxjs/finnish": [
                    "error",
                    {
                        "functions": true,
                        "methods": true,
                        "parameters": true,
                        "properties": true,
                        "strict": true,
                        "types": {
                            "^EventEmitter$": false,
                            "^Store$": false,
                            "^Actions$": false
                        },
                        "variables": true
                    }
                ],
                "rxjs/no-async-subscribe": "error",
                "rxjs/no-compat": "error",
                "rxjs/no-create": "error",
                "rxjs/no-cyclic-action": "error",
                "rxjs/no-exposed-subjects": "off",
                "rxjs/no-implicit-any-catch": "off",
                "rxjs/no-ignored-notifier": "error",
                "rxjs/no-ignored-observable": "error",
                "rxjs/no-ignored-replay-buffer": "error",
                "rxjs/no-ignored-takewhile-value": "error",
                "rxjs/no-nested-subscribe": "warn",
                "rxjs/no-redundant-notify": "error",
                "rxjs/no-subclass": "error",
                "rxjs/no-unbound-methods": "error",
                "rxjs/no-unsafe-catch": "error",
                "rxjs/no-unsafe-first": "error",
                "rxjs/no-unsafe-subject-next": "error",
                "rxjs/no-sharereplay": "error",
                "rxjs/suffix-subjects": [
                    "error",
                    {
                        "parameters": true,
                        "properties": true,
                        "suffix": "subject",
                        "types": {
                            "^EventEmitter$": false
                        },
                        "variables": true
                    }
                ],
                "@angular-eslint/component-selector": [
                    "error",
                    {
                        "type": "element",
                        "prefix": ["ntt"],
                        "style": "kebab-case"
                    }
                ],
                "@angular-eslint/directive-selector": [
                    "error",
                    {
                        "type": ["element", "attribute"],
                        "prefix": ["ntt"],
                        "style": "kebab-case"
                    }
                ],
                "@typescript-eslint/no-parameter-properties": "off",
                "@typescript-eslint/prefer-readonly-parameter-types": "off",
                "@typescript-eslint/consistent-type-assertions": "off",
                "@typescript-eslint/no-type-alias": "off",
                "@typescript-eslint/no-unused-expressions": "off",
                "@typescript-eslint/member-ordering": ["off"],
                "no-else-return": [
                    "error",
                    {
                        "allowElseIf": true
                    }
                ],
                "prefer-template": "error",
                "no-useless-concat": "error",
                "no-constant-condition": [
                    "error",
                    {
                        "checkLoops": true
                    }
                ],
                "prefer-promise-reject-errors": [
                    "error",
                    {
                        "allowEmptyReject": false
                    }
                ],
                "no-case-declarations": "error",
                "no-irregular-whitespace": [
                    "error",
                    {
                        "skipStrings": false,
                        "skipComments": false,
                        "skipRegExps": false,
                        "skipTemplates": false
                    }
                ],
                "quotes": "off",
                "@typescript-eslint/quotes": "off",
                "@typescript-eslint/no-unnecessary-type-assertion": "off",
                "@typescript-eslint/no-var-requires": "off",
                "@typescript-eslint/explicit-function-return-type": "off",
                "@typescript-eslint/adjacent-overload-signatures": "error",
                "no-unused-vars": "off",
                "@typescript-eslint/no-unused-vars": [
                    "error",
                    {
                        "argsIgnorePattern": "^_"
                    }
                ],
                "import/no-namespace": "off",
                "@typescript-eslint/no-misused-promises": [
                    "error",
                    {
                        "checksConditionals": true,
                        "checksVoidReturn": true
                    }
                ],
                "import/first": "error",
                "import/no-duplicates": "error",
                "import/no-dynamic-require": "error",
                "import/no-deprecated": "off",
                "import/no-cycle": "off",
                "import/no-self-import": "off",
                "import/namespace": "off",
                "no-duplicate-imports": "error",
                "sort-imports": "off",
                "no-invalid-this": "off",
                "@typescript-eslint/no-invalid-this": "error",
                "prefer-const": [
                    "error",
                    {
                        "destructuring": "any",
                        "ignoreReadBeforeAssign": false
                    }
                ],
                "camelcase": "off",
                "new-cap": "off",
                "@typescript-eslint/naming-convention": [
                    "error",
                    {
                        "selector": "default",
                        "format": ["camelCase"]
                    },
                    {
                        "selector": "variable",
                        "format": ["camelCase", "UPPER_CASE"]
                    },
                    {
                        "selector": "variable",
                        "types": ["boolean"],
                        "format": ["PascalCase", "UPPER_CASE"],
                        "prefix": ["allow", "is", "has", "should", "contains", "as", "to", "can", "or", "was"]
                    },
                    //                    {
                    //                        "selector": "classProperty",
                    //                        "format": ["camelCase", ]
                    //                    },
                    {
                        "selector": "classProperty",
                        "types": ["boolean"],
                        "modifiers": ["public"],
                        "format": ["PascalCase"],
                        "prefix": ["allow", "is", "has", "should", "contains", "as", "to", "can", "or", "was"]
                    },
                    {
                        "selector": "classProperty",
                        "modifiers": ["protected"],
                        "format": ["camelCase"]
                    },
                    {
                        "selector": "classProperty",
                        "modifiers": ["private"],
                        "format": ["camelCase"],
                        "leadingUnderscore": "allow"
                    },
                    {
                        "selector": "classProperty",
                        "types": ["boolean"],
                        "modifiers": ["protected"],
                        "format": ["PascalCase"],
                        "prefix": ["allow", "is", "has", "should", "contains", "as", "to", "can", "or", "was"]
                    },
                    {
                        "selector": "classProperty",
                        "types": ["boolean"],
                        "modifiers": ["private"],
                        "format": ["PascalCase"],
                        "prefix": ["allow", "is", "has", "should", "contains", "as", "to", "can", "or", "was"]
                    },
                    {
                        "selector": "parameter",
                        "format": ["camelCase"],
                        "leadingUnderscore": "allow"
                    },
                    {
                        "selector": "parameter",
                        "types": ["boolean"],
                        "format": ["PascalCase"],
                        "leadingUnderscore": "allow",
                        "prefix": ["allow", "is", "has", "should", "contains", "as", "to", "can", "or", "was"]
                    },
                    {
                        "selector": "function",
                        "format": ["camelCase"]
                    },
                    {
                        "selector": "objectLiteralProperty",
                        "format": ["camelCase", "PascalCase", "PascalCase", "snake_case"]
                    },
                    {
                        "selector": "memberLike",
                        "modifiers": ["private"],
                        "format": ["camelCase"]
                    },
                    {
                        "selector": "memberLike",
                        "modifiers": ["protected"],
                        "format": ["camelCase"]
                    },
                    {
                        "selector": "memberLike",
                        "modifiers": ["public"],
                        "format": ["camelCase", "snake_case"],
                        "leadingUnderscore": "forbid"
                    },
                    {
                        "selector": "typeLike",
                        "format": ["PascalCase"]
                    },
                    {
                        "selector": "interface",
                        "format": ["PascalCase"],
                        "prefix": ["I"]
                    },
                    {
                        "selector": "typeAlias",
                        "format": ["PascalCase"],
                        "suffix": ["Type"]
                    },
                    {
                        "selector": "enumMember",
                        "format": ["UPPER_CASE"]
                    },
                    {
                        "selector": "enum",
                        "format": ["PascalCase"],
                        "prefix": ["E"]
                    },
                    {
                        "selector": "class",
                        "format": ["PascalCase"]
                    },
                    {
                        "selector": "variable",
                        "modifiers": ["global"],
                        "format": ["UPPER_CASE", "camelCase"],
                        "leadingUnderscore": "forbid"
                    },
                    {
                        "selector": "variable",
                        "types": ["function"],
                        "modifiers": ["global"],
                        "format": ["UPPER_CASE", "camelCase"],
                        "leadingUnderscore": "forbid"
                    },
                    {
                        "selector": "variable",
                        "modifiers": ["global"],
                        "types": ["boolean"],
                        "format": ["UPPER_CASE"],
                        "prefix": ["ALLOW_", "IS_", "HAS_", "SHOULD_", "CONTAINS_", "AS_", "TO_", "CAN_", "OR_", "WAS_"]
                    }
                ],
                "@typescript-eslint/no-explicit-any": [
                    "warn",
                    {
                        "fixToUnknown": false,
                        "ignoreRestArgs": false
                    }
                ],
                "object-curly-spacing": ["error", "always"],
                "linebreak-style": "off",
                "computed-property-spacing": ["error", "never"],
                "array-bracket-spacing": "off",
                "prefer-rest-params": "off",
                "require-jsdoc": "off",
                "valid-jsdoc": "off",
                "comma-dangle": "off",
                "object-shorthand": [
                    "error",
                    "always",
                    {
                        "avoidExplicitReturnArrows": false
                    }
                ],
                "arrow-body-style": "off",
                "prefer-arrow-callback": "off",
                "no-dupe-else-if": "error",
                "no-unmodified-loop-condition": "error",
                "no-extra-label": "error",
                "curly": ["error", "all"],
                "no-await-in-loop": "error",
                "prefer-destructuring": [
                    "warn",
                    {
                        "VariableDeclarator": {
                            "array": true,
                            "object": true
                        },
                        "AssignmentExpression": {
                            "array": true,
                            "object": true
                        }
                    },
                    {
                        "enforceForRenamedProperties": false
                    }
                ],
                "@typescript-eslint/no-extraneous-class": "off",
                "@typescript-eslint/unbound-method": "off",
                "@typescript-eslint/no-unsafe-call": "off",
                "@typescript-eslint/no-unsafe-member-access": "off",
                "@typescript-eslint/no-unsafe-return": "off",
                "@typescript-eslint/no-unsafe-assignment": "off",
                "@typescript-eslint/prefer-enum-initializers": "error",
                "@typescript-eslint/prefer-literal-enum-member": "off",
                "@typescript-eslint/prefer-regexp-exec": "error",
                "@typescript-eslint/await-thenable": "error",
                "@typescript-eslint/unified-signatures": "error",
                "@typescript-eslint/ban-ts-comment": "error",
                "@typescript-eslint/no-empty-interface": [
                    "error",
                    {
                        "allowSingleExtends": false
                    }
                ],
                "@typescript-eslint/restrict-template-expressions": "off",
                "@typescript-eslint/restrict-plus-operands": [
                    "error",
                    {
                        "checkCompoundAssignments": true
                    }
                ],
                "no-undef": [
                    "error",
                    {
                        "typeof": true
                    }
                ],
                "no-undef-init": "error",
                "no-useless-escape": "error",
                "no-prototype-builtins": "error",
                "@typescript-eslint/no-magic-numbers": "off",
                "no-magic-numbers": [
                    "warn",
                    {
                        "enforceConst": true,
                        "detectObjects": true,
                        "ignoreArrayIndexes": false,
                        "ignoreDefaultValues": false,
                        "ignore": [0, 1, -1]
                    }
                ],
                "require-await": "off",
                "@typescript-eslint/require-await": "error",
                "no-empty-function": "off",
                "no-var": "error",
                "spaced-comment": [
                    "error",
                    "always",
                    {
                        "markers": ["/"]
                    }
                ],
                "@typescript-eslint/no-empty-function": [
                    "error",
                    {
                        "allow": ["decoratedFunctions"]
                    }
                ],
                "@typescript-eslint/explicit-member-accessibility": [
                    "error",
                    {
                        "accessibility": "explicit",
                        "overrides": {
                            "accessors": "no-public",
                            "constructors": "no-public",
                            "methods": "no-public",
                            "properties": "no-public",
                            "parameterProperties": "explicit"
                        }
                    }
                ],
                "no-unneeded-ternary": "error",
                "@typescript-eslint/prefer-optional-chain": "error",
                "no-restricted-globals": [
                    "error",
                    {
                        "name": "String",
                        "message": "Use the prototype .toString() instead which fail fast by throwing errors instead of doing black magic stuff!"
                    },
                    {
                        "name": "Number",
                        "message": "Use the method parseInt() instead which convert weird values to NaN instead of magic numbers which makes it more logical"
                    }
                ],
                "no-implied-eval": "off",
                "@typescript-eslint/no-implied-eval": "error",
                "@typescript-eslint/no-inferrable-types": "off",
                "@typescript-eslint/consistent-type-imports": "off",
                "@angular-eslint/contextual-decorator": "error",
                "@angular-eslint/contextual-lifecycle": "error",
                "@angular-eslint/no-lifecycle-call": "error",
                "@angular-eslint/no-output-native": "error",
                "@angular-eslint/use-lifecycle-interface": "error",
                "@angular-eslint/no-conflicting-lifecycle": "error",
                "@angular-eslint/prefer-output-readonly": "error",
                "@angular-eslint/relative-url-prefix": "error",
                "@angular-eslint/use-pipe-transform-interface": "error",
                "@angular-eslint/component-class-suffix": "error",
                "@angular-eslint/directive-class-suffix": "error",
                "@angular-eslint/no-host-metadata-property": "error",
                "@angular-eslint/no-inputs-metadata-property": "error",
                "@angular-eslint/no-outputs-metadata-property": "error",
                "@angular-eslint/no-queries-metadata-property": "error",
                "@angular-eslint/no-output-rename": "off",
                "@angular-eslint/no-input-rename": "off",
                "quote-props": ["error", "consistent-as-needed"]
            }
        },
        {
            "files": ["*.module.ts"],
            "rules": {
                "prefer-arrow/prefer-arrow-functions": "off",
                "@typescript-eslint/promise-function-async": "off",
                "@typescript-eslint/typedef": "off",
                "@typescript-eslint/naming-convention": [
                    "error",
                    {
                        "selector": "memberLike",
                        "modifiers": ["public"],
                        "format": ["camelCase", "PascalCase"],
                        "leadingUnderscore": "forbid"
                    }
                ]
            }
        },
        {
            "files": ["*.html"],
            "parser": "@angular-eslint/template-parser",
            "extends": ["plugin:@angular-eslint/template/recommended"],
            "plugins": ["@angular-eslint/template"],
            "rules": {
                "@angular-eslint/template/no-negated-async": "off",
                "@angular-eslint/template/banana-in-box": "error",
                "@angular-eslint/template/no-any": "warn",
                "@angular-eslint/template/no-distracting-elements": "error",
                "@angular-eslint/template/use-track-by-function": "error",
                "@angular-eslint/template/eqeqeq": "error"
            }
        },
        {
            "files": ["*.html"],
            "excludedFiles": ["*inline-template-*.component.html"],
            "extends": ["plugin:prettier/recommended"],
            "plugins": ["prettier"],
            "rules": {
                "prettier/prettier": [
                    "error",
                    {
                        "endOfLine": "auto",
                        "parser": "angular"
                    }
                ]
            }
        }
    ]
}
